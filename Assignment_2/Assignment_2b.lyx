#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans helvet
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.25cm
\topmargin 1.25cm
\rightmargin 1.25cm
\bottommargin 1.5cm
\headheight 1.25cm
\headsep 1.25cm
\footskip 1.25cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
C Assignment - Pointers
\end_layout

\begin_layout Author
Swapnil Basak
\begin_inset Newline newline
\end_inset

EE11B122
\begin_inset Newline newline
\end_inset

IIT Madras
\end_layout

\begin_layout Section*
Problem Statement
\end_layout

\begin_layout Standard
The task is to create a C program that goes through a text file and prints
 the statistics of number of words with different lengths.
 We will consider words of length of 3 to 10 for our statistics.
 This program is written by indexing through strings using pointers.
\end_layout

\begin_layout Section*
Code
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,frame=single,language=C,numbers=left,numbersep=7pt,stepnumber=1,tabsize=2"
inline false
status open

\begin_layout Plain Layout

#include<stdio.h> 
\end_layout

\begin_layout Plain Layout

#include<stdlib.h> 
\end_layout

\begin_layout Plain Layout

#define MAXLENGTH 512
\end_layout

\begin_layout Plain Layout

/*       
\end_layout

\begin_layout Plain Layout

Program to find out no.
 of words with N     
\end_layout

\begin_layout Plain Layout

chars breaking at ',','.','/t','/0',' '     
\end_layout

\begin_layout Plain Layout

This is the Pointer method implementation.
          
\end_layout

\begin_layout Plain Layout

Swapnil Basak       
\end_layout

\begin_layout Plain Layout

EE11B122 
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char **argv) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

/* Expects a filename too, check for that */ 
\end_layout

\begin_layout Plain Layout

if(argc != 2) 
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	printf("Usage ./a.out <filename>");     
\end_layout

\begin_layout Plain Layout

	exit(1); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

/* File pointer */
\end_layout

\begin_layout Plain Layout

FILE *fp; 
\end_layout

\begin_layout Plain Layout

fp=fopen(argv[1], "r"); 
\end_layout

\begin_layout Plain Layout

if(fp == NULL)  
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	printf("File could not be opened");     
\end_layout

\begin_layout Plain Layout

	exit(2); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

char buf[MAXLENGTH]; 
\end_layout

\begin_layout Plain Layout

int i = 0; 
\end_layout

\begin_layout Plain Layout

char wordcount[11]; 
\end_layout

\begin_layout Plain Layout

int wordlen=0; 
\end_layout

\begin_layout Plain Layout

int ptr_i=0; 
\end_layout

\begin_layout Plain Layout

int count=0; 
\end_layout

\begin_layout Plain Layout

/* Buffer pointer */ 
\end_layout

\begin_layout Plain Layout

char *ptr; 
\end_layout

\begin_layout Plain Layout

/* Initialize all to 0 */ 
\end_layout

\begin_layout Plain Layout

for(i=0;i<11;i++) 
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	wordcount[i]=0; 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

/* Loop till EOF */ 
\end_layout

\begin_layout Plain Layout

while(fgets(buf, MAXLENGTH, fp)) 
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	printf("Parsing text --> %s 
\backslash
n", buf);     
\end_layout

\begin_layout Plain Layout

	ptr=buf;     
\end_layout

\begin_layout Plain Layout

	for(ptr=buf;;ptr++)     
\end_layout

\begin_layout Plain Layout

	{         
\end_layout

\begin_layout Plain Layout

	/* Split at specified characters and check if it is in between a sentence
          
\end_layout

\begin_layout Plain Layout

		or at the beginning */         
\end_layout

\begin_layout Plain Layout

		if(*ptr==' '||*ptr=='
\backslash
t'||*ptr==','||*ptr=='.')         
\end_layout

\begin_layout Plain Layout

		{             
\end_layout

\begin_layout Plain Layout

		/* Second condition avoids double spaces and spaces after periods */ 
            			if(ptr_i!=0) //&&((ptr_i-count)>1))             
\end_layout

\begin_layout Plain Layout

			{                 
\end_layout

\begin_layout Plain Layout

				wordlen=ptr_i-count;                 
\end_layout

\begin_layout Plain Layout

				/* Move count to letter after present ptr_i */                 
\end_layout

\begin_layout Plain Layout

				count=ptr_i+1;                 
\end_layout

\begin_layout Plain Layout

				wordcount[wordlen]+=1;                     
\end_layout

\begin_layout Plain Layout

				wordlen=0;             
\end_layout

\begin_layout Plain Layout

			}         
\end_layout

\begin_layout Plain Layout

		}         
\end_layout

\begin_layout Plain Layout

		/* Specific logic for EOF as vars need to be reset */         
\end_layout

\begin_layout Plain Layout

		if(*ptr=='
\backslash
0')         
\end_layout

\begin_layout Plain Layout

		{             
\end_layout

\begin_layout Plain Layout

			wordlen=ptr_i-count-1;             
\end_layout

\begin_layout Plain Layout

			wordcount[wordlen]+=1;                 
\end_layout

\begin_layout Plain Layout

			wordlen=0;             
\end_layout

\begin_layout Plain Layout

			ptr_i=0;             
\end_layout

\begin_layout Plain Layout

			count=0;             
\end_layout

\begin_layout Plain Layout

			/* End Iteration */             
\end_layout

\begin_layout Plain Layout

			break;             
\end_layout

\begin_layout Plain Layout

		}         
\end_layout

\begin_layout Plain Layout

	/* Increment ptr_i */         
\end_layout

\begin_layout Plain Layout

	ptr_i++;     
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

for(i=1;i<11;i++) 
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	printf("The no.
 of %d lettered words are %d 
\backslash
n", i, wordcount[i]);     
\end_layout

\begin_layout Plain Layout

}            
\end_layout

\begin_layout Plain Layout

fclose(fp);
\end_layout

\begin_layout Plain Layout

return 0; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Output
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

./a testfile.txt 
\end_layout

\begin_layout Plain Layout

Parsing text --> This is a test file with default words to see if it parses
 correctly  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

The no.
 of 1 lettered words are 0  
\end_layout

\begin_layout Plain Layout

The no.
 of 2 lettered words are 4  
\end_layout

\begin_layout Plain Layout

The no.
 of 3 lettered words are 1  
\end_layout

\begin_layout Plain Layout

The no.
 of 4 lettered words are 3  
\end_layout

\begin_layout Plain Layout

The no.
 of 5 lettered words are 1  
\end_layout

\begin_layout Plain Layout

The no.
 of 6 lettered words are 2  
\end_layout

\begin_layout Plain Layout

The no.
 of 7 lettered words are 1  
\end_layout

\begin_layout Plain Layout

The no.
 of 8 lettered words are 0  
\end_layout

\begin_layout Plain Layout

The no.
 of 9 lettered words are 1
\end_layout

\begin_layout Plain Layout

The no.
 of 10 lettered words are 0
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Algorithm
\end_layout

\begin_layout Standard
A pointer ptr is declared that indexes throughout the buffer string.
 Two flags are used for the logic.
\end_layout

\begin_layout Itemize
A file stream is opened with specified txt file, exception is raised if
 not
\end_layout

\begin_layout Itemize

\shape italic
buf
\shape default
 is initialized per line with MAXLENGTH till EOF is reached
\end_layout

\begin_layout Itemize

\shape italic
ptr_i
\shape default
 that travels with the pointer index
\end_layout

\begin_layout Itemize

\shape italic
count 
\shape default
that relates to the last position of 
\shape italic
ptr_i
\shape default
 
\end_layout

\begin_layout Itemize

\shape italic
wordcount
\shape default
 is stored in an array with 
\shape italic
wordcount
\shape default
[n] denotes no.
 of words consisting of n letters.
\end_layout

\begin_layout Itemize
Finally results are displayed
\end_layout

\end_body
\end_document
