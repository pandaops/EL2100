#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans helvet
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.25cm
\topmargin 1.25cm
\rightmargin 1.25cm
\bottommargin 1.5cm
\headheight 1.25cm
\headsep 1.25cm
\footskip 1.25cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
C Assignment - Histogram
\end_layout

\begin_layout Author
Swapnil Basak
\begin_inset Newline newline
\end_inset

EE11B122
\begin_inset Newline newline
\end_inset

IIT Madras
\end_layout

\begin_layout Section*
Problem Statement
\end_layout

\begin_layout Standard
The task is to create a C program that goes through a text file and prints
 the statistics of number of words with different lengths.
 We will consider words of length of 3 to 10 for our statistics.
 This program is written by indexing through strings using arrays.
\end_layout

\begin_layout Section*
Code
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,frame=single,language=C,numbers=left,numbersep=7pt,showstringspaces=false,stepnumber=1,tabsize=2"
inline false
status open

\begin_layout Plain Layout

#include<stdio.h> 
\end_layout

\begin_layout Plain Layout

#include<stdlib.h> 
\end_layout

\begin_layout Plain Layout

#define MAXLENGTH 512
\end_layout

\begin_layout Plain Layout

/*       
\end_layout

\begin_layout Plain Layout

Program to find out no.
 of words with N     
\end_layout

\begin_layout Plain Layout

chars breaking at ',','.','/t','/0',' '     
\end_layout

\begin_layout Plain Layout

This is the Array method implementation.
          
\end_layout

\begin_layout Plain Layout

Swapnil Basak       
\end_layout

\begin_layout Plain Layout

EE11B122 
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//Histogram 
\end_layout

\begin_layout Plain Layout

void histogram(int p[10]) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

int i=0; 
\end_layout

\begin_layout Plain Layout

int max=0; 
\end_layout

\begin_layout Plain Layout

int j=1; 
\end_layout

\begin_layout Plain Layout

// Find max occurences for upper limit of Y-axis 
\end_layout

\begin_layout Plain Layout

for(i=0;i<9;i++) 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout

	if(p[i]>max)   
\end_layout

\begin_layout Plain Layout

	{       
\end_layout

\begin_layout Plain Layout

	max=p[i];   
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

printf("
\backslash
n");
\end_layout

\begin_layout Plain Layout

// Plotting Logic 
\end_layout

\begin_layout Plain Layout

for(i=max;i>0;i--) 
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

	printf("|",i);    
\end_layout

\begin_layout Plain Layout

	for(j=1;j<11;j++)    
\end_layout

\begin_layout Plain Layout

	{       
\end_layout

\begin_layout Plain Layout

		if(p[j]>=i)       
\end_layout

\begin_layout Plain Layout

		{	           
\end_layout

\begin_layout Plain Layout

			printf("# ");       
\end_layout

\begin_layout Plain Layout

		}       
\end_layout

\begin_layout Plain Layout

		else       
\end_layout

\begin_layout Plain Layout

		{           
\end_layout

\begin_layout Plain Layout

			printf("  ");       
\end_layout

\begin_layout Plain Layout

		}    
\end_layout

\begin_layout Plain Layout

	}    
\end_layout

\begin_layout Plain Layout

printf("
\backslash
n"); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

printf("|_____________________
\backslash
n");
\end_layout

\begin_layout Plain Layout

printf(" |1 2 3 4 5 6 7 8 9 10"); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char **argv) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

/* Expects a filename too, check for that */ 
\end_layout

\begin_layout Plain Layout

if(argc != 2) 
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	printf("Usage ./a.out <filename>");     
\end_layout

\begin_layout Plain Layout

	exit(1); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

/* File pointer */ 
\end_layout

\begin_layout Plain Layout

FILE *fp; 
\end_layout

\begin_layout Plain Layout

fp=fopen(argv[1], "r"); 
\end_layout

\begin_layout Plain Layout

if(fp == NULL)  
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	printf("File could not be opened");     
\end_layout

\begin_layout Plain Layout

	exit(2); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

char buf[MAXLENGTH]; 
\end_layout

\begin_layout Plain Layout

int counter = 0; 
\end_layout

\begin_layout Plain Layout

char wordcount[11]; 
\end_layout

\begin_layout Plain Layout

int wordlen=0; 
\end_layout

\begin_layout Plain Layout

int tempcount=0; 
\end_layout

\begin_layout Plain Layout

/* Initialize all to 0 */ 
\end_layout

\begin_layout Plain Layout

for(counter=0;counter<11;counter++) 
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	wordcount[counter]=0; 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

/* Loop till EOF */ 
\end_layout

\begin_layout Plain Layout

while(fgets(buf, MAXLENGTH, fp)) 
\end_layout

\begin_layout Plain Layout

	{     
\end_layout

\begin_layout Plain Layout

	printf("Parsing text line --> %s", buf);     
\end_layout

\begin_layout Plain Layout

		for(counter=0;counter<MAXLENGTH;counter++)     
\end_layout

\begin_layout Plain Layout

		{         
\end_layout

\begin_layout Plain Layout

			/* Split at specified characters and check if it is in between a sentence
          
\end_layout

\begin_layout Plain Layout

			or at the beginning */         
\end_layout

\begin_layout Plain Layout

			if(buf[counter]==' '||buf[counter]=='
\backslash
t'||buf[counter]==',')         
\end_layout

\begin_layout Plain Layout

			{             
\end_layout

\begin_layout Plain Layout

			/* Second condition avoids double spaces and spaces after periods */
 
\end_layout

\begin_layout Plain Layout

				if(counter!=0)/*&&((counter-tempcount)>1))*/             
\end_layout

\begin_layout Plain Layout

				{                 
\end_layout

\begin_layout Plain Layout

					wordlen=counter-tempcount;                 
\end_layout

\begin_layout Plain Layout

					wordcount[wordlen]+=1;                     
\end_layout

\begin_layout Plain Layout

					wordlen=0;             
\end_layout

\begin_layout Plain Layout

				}             
\end_layout

\begin_layout Plain Layout

			/* Move tempcount to present space+1 */             
\end_layout

\begin_layout Plain Layout

			tempcount=counter+1;         
\end_layout

\begin_layout Plain Layout

			}         
\end_layout

\begin_layout Plain Layout

			/* Specific logic for EOF as vars need to be reset */         
\end_layout

\begin_layout Plain Layout

			if(buf[counter]=='
\backslash
0')         
\end_layout

\begin_layout Plain Layout

			{             
\end_layout

\begin_layout Plain Layout

				wordlen=counter-tempcount-1;             
\end_layout

\begin_layout Plain Layout

				wordcount[wordlen]+=1;                 
\end_layout

\begin_layout Plain Layout

				wordlen=0;             
\end_layout

\begin_layout Plain Layout

				tempcount=0;             
\end_layout

\begin_layout Plain Layout

				/* End iteration */             
\end_layout

\begin_layout Plain Layout

				break;         
\end_layout

\begin_layout Plain Layout

			}     
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

for(counter=1;counter<11;counter++) 
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	printf(" 
\backslash
nThe no.
 of %d lettered words are %d 
\backslash
n", counter, wordcount[counter]);     
\end_layout

\begin_layout Plain Layout

}            
\end_layout

\begin_layout Plain Layout

histogram(wordcount);
\end_layout

\begin_layout Plain Layout

fclose(fp);
\end_layout

\begin_layout Plain Layout

return 1; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Output
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left"
inline false
status open

\begin_layout Plain Layout

./a testfile.txt 
\end_layout

\begin_layout Plain Layout

Parsing text --> This is a test file with default words to see if it the
 histogram draws correctly   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

The no.
 of 1 lettered words are 1  
\end_layout

\begin_layout Plain Layout

The no.
 of 2 lettered words are 4  
\end_layout

\begin_layout Plain Layout

The no.
 of 3 lettered words are 2  
\end_layout

\begin_layout Plain Layout

The no.
 of 4 lettered words are 4  
\end_layout

\begin_layout Plain Layout

The no.
 of 5 lettered words are 2  
\end_layout

\begin_layout Plain Layout

The no.
 of 6 lettered words are 0  
\end_layout

\begin_layout Plain Layout

The no.
 of 7 lettered words are 1  
\end_layout

\begin_layout Plain Layout

The no.
 of 8 lettered words are 0  
\end_layout

\begin_layout Plain Layout

The no.
 of 9 lettered words are 2  
\end_layout

\begin_layout Plain Layout

The no.
 of 10 lettered words are 0  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

|  *   *              
\end_layout

\begin_layout Plain Layout

|  *   *              
\end_layout

\begin_layout Plain Layout

|  * * * *       *    
\end_layout

\begin_layout Plain Layout

|* * * * *   *   *    
\end_layout

\begin_layout Plain Layout

|____________________
\end_layout

\begin_layout Plain Layout

|1 2 3 4 5 6 7 8 9 10
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Algorithm
\end_layout

\begin_layout Standard
An array index ptr is declared that indexes throughout the buffer string.
 Two flags are used for the logic.
\end_layout

\begin_layout Itemize
A file stream is opened with specified txt file, exception is raised if
 not
\end_layout

\begin_layout Itemize

\shape italic
buf
\shape default
 is initialized per line with MAXLENGTH till EOF is reached
\end_layout

\begin_layout Itemize

\shape italic
counter
\shape default
 that travels with the array index
\end_layout

\begin_layout Itemize

\shape italic
tempcount 
\shape default
that relates to the last position of 
\shape italic
counter
\shape default
 
\end_layout

\begin_layout Itemize

\shape italic
wordcount
\shape default
 is stored in an array with 
\shape italic
wordcount
\shape default
[n] denotes no.
 of words consisting of n letters
\end_layout

\begin_layout Itemize
wordcount is passed to histogram() and proocessed
\end_layout

\begin_layout Itemize
The max element is found in the array.
 This serves as the maximum Y axis limit.
 
\end_layout

\begin_layout Itemize
Consequently, the text graph is filled with a double for-loop if for 
\shape italic
wordcount
\shape default
[n] the max element at that iteration is smaller than max(
\shape italic
wordcount
\shape default
[n])
\end_layout

\begin_layout Itemize
Finally results are displayed
\end_layout

\end_body
\end_document
