#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass literate-article
\use_default_options true
\maintain_unincluded_children false
\language canadian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics pdftex
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 1.5cm
\rightmargin 1.5cm
\bottommargin 0.5cm
\headheight 0.5cm
\headsep 0.5cm
\footskip 0.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Python Assignment -2
\end_layout

\begin_layout Author
Swapnil Basak
\end_layout

\begin_layout Date
EE11B122, IIT Madras
\end_layout

\begin_layout Abstract
P
ut abstract here
\end_layout

\begin_layout Section*
Program
\end_layout

\begin_layout Standard
We include the shebang and import out libraries
\end_layout

\begin_layout Subsection*
Code
\end_layout

\begin_layout Scrap

<<code>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

#! usr/bin/python
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

from scipy.integrate import quad
\end_layout

\begin_layout Scrap

from scipy import linspace, cumsum, where
\end_layout

\begin_layout Scrap

import matplotlib.pyplot as graph
\end_layout

\begin_layout Scrap

import scipy.special as sp
\end_layout

\begin_layout Scrap

from numpy import fabs 	
\end_layout

\begin_layout Scrap

\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Now, we set our constants and describe the function that the quad routine
 will use.
 We also declare the vectors that we will be using throughout this program.
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

<<program>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

# The function that Quad uses
\end_layout

\begin_layout Scrap

func=lambda x: 1/(1+x**2)
\end_layout

\begin_layout Scrap

step=0.1
\end_layout

\begin_layout Scrap

err=1
\end_layout

\begin_layout Scrap

counter=0
\end_layout

\begin_layout Scrap

steps = []
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

samples=sp.arange(0,5+step,step)
\end_layout

\begin_layout Scrap

results = sp.linspace(0,0,len(samples))
\end_layout

\begin_layout Scrap

manual= sp.linspace(0,0,len(samples))
\end_layout

\begin_layout Scrap

estimated_errors, real_errors=[],[]
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Standard
We then decalre the computing function that takes in two arguements and
 applie dthe 
\begin_inset Formula $quad()$
\end_inset

 routine and returns the result array.
\end_layout

\begin_layout Scrap

<<quadfunc>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

def integrate(samples,results):
\end_layout

\begin_layout Scrap

	for i in range(len(samples)):
\end_layout

\begin_layout Scrap

	# Compute Results with Quad
\end_layout

\begin_layout Scrap

	    results[i]=quad(func,0,samples[i])[0]
\end_layout

\begin_layout Scrap

	return results
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
We then declare the function that calculates the above integral using the
 trapezoidal step algorithm.
 It says that
\end_layout

\begin_layout Scrap

<<cumsum>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

def series(new_samples,new_results):
\end_layout

\begin_layout Scrap

    # Compute manually using recursive summation
\end_layout

\begin_layout Scrap

    new_results=step*(cumsum(func(new_samples)) - 0.5*(func(min(new_samples))+fun
c(new_samples)))
\end_layout

\begin_layout Scrap

    return new_results
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Now we write another function that increases our sample size by halving
 the step interval.
 It returns a tuple both of the new sample set and result array
\end_layout

\begin_layout Scrap

<<ftrap>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

def ftrap(oldx,oldy):
\end_layout

\begin_layout Scrap

    # Return double of the sample size
\end_layout

\begin_layout Scrap

    newx = sp.arange(oldx[0],oldx[-1]+(0.5)*step,0.5*step)
\end_layout

\begin_layout Scrap

    newy = sp.linspace(0,0,len(newx))
\end_layout

\begin_layout Scrap

    return (newx,newy)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Now we calculate the maximum error for common points in the old and the
 new array.
 We do this using python list slicing in steps and list comprehension.
 We also calculate the actual value of the function by evaluating our sample
 set with the inbuilt arctan function.
\end_layout

\begin_layout Scrap

<<error>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

def error(old,new):
\end_layout

\begin_layout Scrap

    # Return the Max absolute value
\end_layout

\begin_layout Scrap

    if new is None:
\end_layout

\begin_layout Scrap

        return 1
\end_layout

\begin_layout Scrap

    new=new[::2]
\end_layout

\begin_layout Scrap

    err = max([abs(val) for val in new-old])
\end_layout

\begin_layout Scrap

    return err
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

results = integrate(samples,results)
\end_layout

\begin_layout Scrap

preset = sp.arctan(samples)
\end_layout

\begin_layout Scrap

preset_errors = [fabs(x) for x in results-preset]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Before we move on to minimizing error, we store the current values of the
 
\begin_inset Formula $quad()$
\end_inset

 with the preset values of the function.
 We also plot a graph to analyze the semilogy plot of the errors between
 the 
\begin_inset Formula $quad$
\end_inset

 function and the 
\begin_inset Formula $arctan$
\end_inset

 function.
\end_layout

\begin_layout Scrap

<<graphs_1>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

graph.figure(1)
\end_layout

\begin_layout Scrap

graph.plot(samples,results,'ro',samples,preset,'k')
\end_layout

\begin_layout Scrap

graph.legend(('quad fn',r'$tan^{-1}(x)$'))
\end_layout

\begin_layout Scrap

graph.title(r'Plot of $1/(1+t^{2})$')
\end_layout

\begin_layout Scrap

graph.xlabel(r'$x$')
\end_layout

\begin_layout Scrap

graph.ylabel('quad fn')
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

graph.figure(2)
\end_layout

\begin_layout Scrap

graph.semilogy(samples,preset_errors,'ro')
\end_layout

\begin_layout Scrap

graph.xlabel(r'$x$')
\end_layout

\begin_layout Scrap

graph.ylabel('Error')
\end_layout

\begin_layout Scrap

graph.title(r'Error in $
\backslash
int_{0}^{x}dt/(1+t^{2})$')
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

results = series(samples,manual)
\end_layout

\begin_layout Scrap

new_samples=samples
\end_layout

\begin_layout Scrap

new_results=results
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
We now estimate the error using the method of vectors and recursive iteration.
 We state that we want an 
\begin_inset Formula $\varepsilon$
\end_inset

 < 
\begin_inset Formula $10^{-8}$
\end_inset

 or a maximium of 9 iterations.
 Each iteration, we call 
\begin_inset Formula $ftrap()$
\end_inset

 and double the sample set to increase accuracy.
 We then calculate and store two different errors - the error between common
 points and the error with the preset 
\begin_inset Formula $arctan()$
\end_inset

 function\SpecialChar \@.

\end_layout

\begin_layout Scrap

<<estimate>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

# Keep doing until error is below tolerance or counter reaches 9
\end_layout

\begin_layout Scrap

while(err>pow(10,-7)):
\end_layout

\begin_layout Scrap

    counter+=1
\end_layout

\begin_layout Scrap

    if counter>9:
\end_layout

\begin_layout Scrap

        break
\end_layout

\begin_layout Scrap

    new_samples,new_results=ftrap(samples,results)
\end_layout

\begin_layout Scrap

    step = step/2
\end_layout

\begin_layout Scrap

    steps.append(step)
\end_layout

\begin_layout Scrap

    new_results = series(new_samples,new_results)
\end_layout

\begin_layout Scrap

    if counter==1:
\end_layout

\begin_layout Scrap

        graph.figure(3)
\end_layout

\begin_layout Scrap

        graph.plot(new_samples,new_results,'ro',samples,preset,'k')
\end_layout

\begin_layout Scrap

        graph.xlabel(r'$x$')
\end_layout

\begin_layout Scrap

        graph.ylabel(r'$
\backslash
int_{0}^{x}
\backslash
frac{dt}{(1+t^{2})}$')
\end_layout

\begin_layout Scrap

        graph.title('Integration using Trapezoidal Rule') 
\end_layout

\begin_layout Scrap

    err = error(results,new_results)
\end_layout

\begin_layout Scrap

    samples=new_samples
\end_layout

\begin_layout Scrap

    results=new_results
\end_layout

\begin_layout Scrap

    preset = sp.arctan(new_samples)
\end_layout

\begin_layout Scrap

    real_errors.append(max([fabs(x) for x in new_results-preset]))
\end_layout

\begin_layout Scrap

    estimated_errors.append(err)
\end_layout

\begin_layout Scrap

    print "Running Ftrap iteration", counter 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Finally, we plot the loglog plot of the two different types of errors and
 we see the similarity in their nature.
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

<<graphs_2>>=
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap

graph.figure(4)
\end_layout

\begin_layout Scrap

graph.title(r'Error in $
\backslash
int_{0}^{x}dt/(1+t^{2})$')
\end_layout

\begin_layout Scrap

graph.xlabel(r'$log(x)$')
\end_layout

\begin_layout Scrap

graph.ylabel(r'Log(Error)')
\end_layout

\begin_layout Scrap

graph.loglog(steps,estimated_errors,'ro',steps,real_errors,'+')
\end_layout

\begin_layout Scrap

graph.legend(('Exact error','Estimated error'))
\end_layout

\begin_layout Scrap

graph.show()
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename quad.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Plot of Quad with arctan
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename semilog.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Semilog plot of the error
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Trapezoid.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
Plot of the trapezoidal series.
 As we can see, it is remarkably accurate.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename error_estimate.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
LogLog plots
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Normal plot of the trapezoidal method and LogLog plots of the errors
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
